module com.example.helloactivities.Net where

import frege.java.IO
import froid.util.Log
import Control.Concurrent
import Java.Util
import froid.Types

type Headers = [(String, String)]

data Method = GET | POST | DELETE

instance Show Method where
  show GET = "GET"
  show POST = "POST"
  show DELETE = "DELETE"

-- java.net interface

data ProtocolException = native java.net.ProtocolException
data MalformedURLException = native java.net.MalformedURLException
derive Exceptional MalformedURLException
derive Exceptional ProtocolException
derive Exceptional ClassCastException

data URL = native java.net.URL where
    native new              :: String -> STMutable RealWorld URL throws MalformedURLException
    native openConnection   :: MutableIO URL -> IOMutable URLConnection throws IOException

data URLConnection = native java.net.URLConnection

data HttpURLConnection = native java.net.HttpURLConnection where
    native setRequestMethod :: MutableIO HttpURLConnection -> String -> IO () throws ProtocolException
    native setRequestProperty :: MutableIO HttpURLConnection -> String -> String -> IO ()
    native getInputStream :: MutableIO HttpURLConnection -> IO InputStream throws IOException

native toHttpURLConnection "(java.net.HttpURLConnection)"
  :: MutableIO URLConnection -> IO (ClassCastException | MutableIO HttpURLConnection)


req :: Method -> Headers -> String -> IO (String | String)
req method headers path = do
  r <- newEmptyMVar
  forkIO $ do
    res <- helper
      `catch` (\(e::ClassCastException) -> return (Left "ClassCastException"))
      `catch` (\(e::MalformedURLException) -> return (Left "MalformedURLException"))
      `catch` (\(e::IOException) -> return (Left "IOException"))
      `catch` (\(e::ProtocolException) -> return (Left "ProtocolException"))
      `catch` (\(u::Undefined) -> return (Left "Undefined"))
      `catch` (\(e::Exception) -> return (Left "Exception"))
    putMVar r res
  takeMVar r
  where
    helper = do
      url <- URL.new path
      conn <- url.openConnection
      mClient <- toHttpURLConnection conn
      case mClient of
        Left _ -> return $ Left "Bad cast"
        Right client -> do
          client.setRequestMethod (show method)
          forM_ headers (uncurry client.setRequestProperty)
          is <- client.getInputStream
          rdr <- InputStreamReader.new is "UTF-8"
          bfr <- BufferedReader.new rdr
          !res <- bfr.getLines
          is.close
          return $ Right $ unlines res


get = req GET